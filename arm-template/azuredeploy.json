{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "containerRegistryName": {
      "type": "string",
      "minLength": 5,
      "maxLength": 50,
      "metadata": {
        "description": "Name of your Azure Container Registry"
      }
    },
    "acrAdminUserEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable admin user that have push / pull permission to the registry."
      }
    },
    "acrSku": {
      "type": "string",
      "metadata": {
        "description": "Tier of your Azure Container Registry."
      },
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ]
    },
    "functionAppName": {
      "type": "string",
      "metadata": {
        "description": "The name of the function app that you wish to create."
      }
    },
    "runtime": {
      "type": "string",
      "defaultValue": "dotnet",
      "allowedValues": [
        "node",
        "dotnet",
        "java"
      ],
      "metadata": {
        "description": "The language worker runtime to load in the function app."
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "The name of the storage account that you wish to create."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "cosmosDbAccountName": {
      "type": "string",
      "metadata": {
        "description": "The Azure Cosmos DB account name."
      }
    },
    "apiType": {
      "type": "string",
      "metadata": {
        "description": "The Azure Cosmos DB API type, by default SQL; otherwise one of Cassandra, Gremlin, MongoDB, or Table"
      },
      "allowedValues": [
        "Cassandra",
        "Gremlin",
        "MongoDB",
        "SQL",
        "Table"
      ],
      "defaultValue": "SQL"
    },
    "textAnalyticsAccountName": {
      "metadata": {
        "description": "Display name of Text Analytics API account"
      },
      "type": "string"
    },
    "textAnalyticsSKU": {
      "type": "string",
      "metadata": {
        "description": "SKU for TextAnalytics API"
      },
      "defaultValue": "S1",
      "allowedValues": [
        "F0",
        "S1",
        "S2",
        "S3",
        "S4"
      ]
    },
    "signalRServiceName": {
      "type": "string",
      "metadata": {
        "description": "The globally unique name of the SignalR resource to create."
      }
    },
    "signalRPricingTier": {
      "type": "string",
      "defaultValue": "Free_F1",
      "allowedValues": [
        "Free_F1",
        "Standard_S1"
      ],
      "metadata": {
        "description": "The pricing tier of the SignalR resource."
      }
    },
    "signalRCapacity": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        1,
        2,
        5,
        10,
        20,
        50,
        100
      ],
      "metadata": {
        "description": "The number of SignalR Unit."
      }
    } 
  },
  "variables": {
    "functionAppName": "[parameters('functionAppName')]",
    "hostingPlanName": "[parameters('functionAppName')]",
    "applicationInsightsName": "[parameters('functionAppName')]",
    "storageAccountName": "[parameters('storageAccountName')]",
    "storageAccountid": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
    "functionWorkerRuntime": "[parameters('runtime')]",
    "offerType": "Standard",
    "appInsightsResourceId": "[resourceId('microsoft.insights/components/', variables('applicationInsightsName'))]",
    "cognitiveservicesid": "[concat(resourceGroup().id,'/providers/','Microsoft.CognitiveServices/accounts/', parameters('textAnalyticsAccountName'))]",
    "cosmosDBResourceId": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]",
    "cosmosDBApiVersion": "[providers('Microsoft.DocumentDB', 'databaseAccounts').apiVersions[0]]",
    "signalRResourceId": "[concat(resourceGroup().id,'/providers/','Microsoft.SignalRService/SignalR', parameters('signalRServiceName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2016-12-01",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-04-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "computeMode": "Dynamic",
        "sku": "Dynamic"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "8.11.1"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components/', variables('applicationInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[variables('functionWorkerRuntime')]"
            },
            {
              "name": "CosmosDbConnectionString",
              "value": "[concat('AccountEndpoint=https://', parameters('cosmosDbAccountName'), '.documents.azure.com:443/;AccountKey=', listKeys(variables('cosmosDBResourceId'), variables('cosmosDBApiVersion')).primaryMasterKey, ';')]"
            },
            {
              "name": "AzureSignalRConnectionString",
              "value": "[concat('Endpoint=https://', parameters('signalRServiceName'), '.service.signalr.net;AccessKey=', listKeys(parameters('signalRServiceName'), providers('Microsoft.SignalRService', 'SignalR').apiVersions[0]).primaryKey, ';Version=1.0;')]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2016-08-01",
      "name": "[concat(parameters('functionAppName'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
        "[resourceId('Microsoft.Storage/StorageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "allowedOrigins": [
            "[concat('https://', parameters('storageAccountName'), '.blob.core.windows.net')]"
          ],
          "supportCredentials": true
        }
      }
    },
    {
      "apiVersion": "2018-05-01-preview",
      "name": "[variables('applicationInsightsName')]",
      "type": "microsoft.insights/components",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('applicationInsightsName'))]": "Resource"
      },
      "properties": {
        "ApplicationId": "[variables('applicationInsightsName')]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "apiVersion": "2015-04-08",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "kind": "[if(equals(parameters('apiType'), 'MongoDB'), 'MongoDB', 'GlobalDocumentDB')]",
      "name": "[parameters('cosmosDbAccountName')]",
      "location": "[parameters('location')]",
      "properties": {
        "name": "[parameters('cosmosDbAccountName')]",
        "databaseAccountOfferType": "[variables('offerType')]",
        "capabilities": [
          {
            "name": "[if(equals(parameters('apiType'), 'Cassandra'), 'EnableCassandra', if(equals(parameters('apiType'), 'Gremlin'), 'EnableGremlin', if(equals(parameters('apiType'), 'MongoDB'), '', if(equals(parameters('apiType'), 'SQL'), '', if(equals(parameters('apiType'), 'Table'), 'EnableTable', '')))))]"
          }
        ]
      },
      "tags": {
        "defaultExperience": "[if(equals(parameters('apiType'), 'Cassandra'), 'Cassandra', if(equals(parameters('apiType'), 'Gremlin'), 'Graph', if(equals(parameters('apiType'), 'MongoDB'), 'MongoDB', if(equals(parameters('apiType'), 'SQL'), 'DocumentDB', if(equals(parameters('apiType'), 'Table'), 'Table', '')))))]"
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "sku": {
        "name": "[parameters('textAnalyticsSKU')]"
      },
      "kind": "TextAnalytics",
      "name": "[parameters('textAnalyticsAccountName')]",
      "apiVersion": "2016-02-01-preview",
      "location": "[parameters('location')]",
      "properties": {}
    },
    {
      "apiVersion": "2018-03-01-preview",
      "location": "[parameters('location')]",
      "name": "[parameters('signalRServiceName')]",
      "properties": {
        "hostNamePrefix": "[parameters('signalRServiceName')]"
      },
      "sku": {
        "capacity": "[parameters('signalRCapacity')]",
        "name": "[parameters('signalRPricingTier')]"
      },
      "type": "Microsoft.SignalRService/SignalR"
    },
    {
      "name": "[parameters('containerRegistryName')]",
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2017-10-01",
      "location": "[parameters('location')]",
      "comments": "Container registry for storing docker images",
      "tags": {
        "displayName": "Container Registry",
        "container.registry": "[parameters('containerRegistryName')]"
      },
      "sku": {
        "name": "[parameters('acrSku')]",
        "tier": "[parameters('acrSku')]"
      },
      "properties": {
        "adminUserEnabled": "[parameters('acrAdminUserEnabled')]"
      }
    }
  ],
  "outputs": {
    "acrLoginServer": {
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries',parameters('containerRegistryName')),'2017-10-01').loginServer]",
      "type": "string"
    },
    "cognitiveServiceEndpoint": {
      "type": "string",
      "value": "[reference(variables('cognitiveservicesid'),'2016-02-01-preview').endpoint]"
    },
    "cognitivekeys": {
      "type": "object",
      "value": "[listKeys(variables('cognitiveservicesid'),'2016-02-01-preview')]"
    },
    "cosmosDbEndpoint": {
      "type": "string",
      "value": "[reference(variables('cosmosDBResourceId'), variables('cosmosDBApiVersion')).documentEndpoint]"
    },
    "cosmosDbPrimaryKey": {
      "type": "string",
      "value": "[listKeys(variables('cosmosDBResourceId'), variables('cosmosDBApiVersion')).primaryMasterKey]"
    },
    "cosmosDbConnectionString": {
      "type": "string",
      "value": "[concat('AccountEndpoint=https://', parameters('cosmosDbAccountName'), '.documents.azure.com:443/;AccountKey=', listKeys(variables('cosmosDBResourceId'), variables('cosmosDBApiVersion')).primaryMasterKey, ';')]"
    },
    "appInsightsInstrumentationKey": {
      "type": "string",
      "value": "[reference(variables('appInsightsResourceId'), '2015-05-01').instrumentationKey]"
    },
    "signalRConnectionString": {
      "type": "string",
      "value": "[concat('Endpoint=https://', parameters('signalRServiceName'), '.service.signalr.net;AccessKey=', listKeys(parameters('signalRServiceName'), providers('Microsoft.SignalRService', 'SignalR').apiVersions[0]).primaryKey, ';Version=1.0;')]"
    }
  }
}